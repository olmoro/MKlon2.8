
      Пример реализации одного шага конечного автомата зарядного устройства
      в режиме, известном как CCCV.

      Примечания:
      Board->       управление аппаратными ресурсами, например портами TSP32;
      Display->     управление ресурсами дисплея, например цветом, строками;
      Tools->       управление прочими ресурсами, например драйвером, памятью.

//============================================ Файл cccvfsm.h
  /*  Объявляется поле имен для этого (СССМ) режима. Имена классов, констант
    и переменных к большой радости любителей "копипаста" в других режимах можно 
    использовать без изменений. */
namespace MCccv
{
  /* Здесь объявляются и определяются общие для этого поля имен константы */

  /* Объявляются ВСЕ КЛАССЫ, описывающие состояния режима, В ЛЮБОЙ ПОСЛЕДОВАТЕЛЬНОСТИ. */

  class M... 
  {};

  class MUpCurrent : public MState
  {
    public:   
      MUpCurrent(MTools * Tools);
      MState * fsm() override;
    private:
      /* Здесь объявляются и определяются константы и переменные этого класса. */
  };

  class M...
  {};
};

//============================================ Файл cccvfsm.cpp
  /*  Начальный этап заряда - ток поднимается не выше заданного уровня, при достижении 
    заданного максимального напряжения переход к его удержанию. 
    Здесь и далее подсчитывается время и отданный заряд, а также сохраняется возможность
    прекращения заряда оператором. */

  // Состояния: "Подъем и удержание максимального тока" описывается классом:
  MUpCurrent::MUpCurrent(MTools * Tools) : MState(Tools)
  {   
    /*  Конструктор класса, выполняет инициализацию при входе в это состояние
      только в том случае, если совершен переход из другого состояния, а не 
      возврат, когда такого перехода не было. */
    Display->showMode((char*)"  CONST CURRENT   ");   // Показывать фазу заряда
    Display->showHelp((char*)"   *C, C - STOP   ");   // Показывать активные кнопки как помощь
    Board->ledsGreen();                               // Светодиод включить зеленым
    Tools->clrTimeCounter();                          // Обнулить счетчик времени
    Tools->clrAhCharge();                             // Обнулить счетчик ампер-часов

    /* Включение преобразователя и коммутатора драйвером силовой платы.
     Параметры PID-регулятора заданы в настройках прибора (DEVICE).
     Здесь задаются сетпойнты по напряжению и току. Подъем тока
     производится ПИД-регулятором.
    */ 
    Tools->txPowerAuto(maxV, maxI, maxS);             /* Начать процесс заряда, подав
      команду с максимальным напряжением, током и скоростью нарастания тока. На этом 
      инициализация состояния закончена. Не забываем, что конструктор класса ничего не 
      возвращает при исполнении */ 
  }

    /*  Методы класса здесь в единственном числе, и представлены единственной функцией */   
  MUpCurrent::MState * MUpCurrent::fsm()
  {
    /* Здесь располагается всё, что надо выполнить при каждом вхождении в это состояние: */
    Tools->chargeCalculations();                        // Обновить отданные ампер-часы.
    /*  Проверим, не была ли нажата, какая и как долго, кнопка. И если да, то "бииип" и 
      закажем переход в указанное состояние, иначе выполним то, что должны сделать перед 
      повторным входом в это же состояние. */ 
    switch ( Keyboard->getKey() )
    {
      case MKeyboard::C_CLICK:
      case MKeyboard::C_LONG_CLICK: Board->buzzerOn();  /* Если зафиксировано короткое или
        длинное нажатие, то заказано досрочное прекращение заряда оператором, 
        то заказывается ... */
      return new MStop(Tools);                          // ... переход в состояние MStop.
      default:;
    }

      /*  Если по кнопкам переходов нет, то выполняем проверки, например, не пора ли переходить 
        ко второй фазе заряда, если напряжение на батарее достигло некоторого уровня: */
    if(Tools->getRealVoltage() >= 0,95 * maxV);
    return new MKeepVmax(Tools);                        // ... переход к удержанию напряжения. 
    
      /*  Если ничего из вышеперечисленного не случилось, обновляем индикацию ... */
    Display->showVolt(Tools->getRealVoltage(), 3);  // Три знака после зпт
    Display->showAmp (Tools->getRealCurrent(), 3);
    Display->initBar(TFT_GREEN);                    /* Бегущая зеленая полоска, когда 
      состоится переход ко второй фазе её назначим желтой */  
    Display->showDuration(Tools->getChargeTimeCounter(), MDisplay::SEC); /* Это время - 
      добавилась 0,1 с - ровно через столько операционная система производит проверку 
      состояния */
    Display->showAh(Tools->getAhCharge());  /* Обновим набежавшие ампер-часы */
    return this;   /* И если ничего не забыли, закажем операционке возврат в это состояние, 
      естественно, без инициализации. Кстати, если надо "вывалиться" из текущего режима в 
      главное меню, то заказывается такой переход не менее красиво: return nullptr; */ 
  };  // MUpCurrent