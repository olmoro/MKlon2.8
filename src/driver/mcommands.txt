  Как задать новую команду обмена с драйвером и её исполнить.

  1. В файле mcmd.h выбрать незанятый код в диапазоне 0x10 ... 0x7F и задать имя, 
  например cmd_name, по которому в дальнейшем будет вызываться на исполнение команда 
  и проверяться ответ от драйвера.

  2. В классе MCommands (файл mcommands.h) в private объявите соответствующую функцию, 
  например doNameFunc(), которую в свою очередь в функции doCommand() (файл mcommands.cpp) 
  включите в конструкцию switch-case.

  3. В тот же класс MCommands вставьте определение объявленной функции, например:

      void MCommands::doNameFunc()
      {
        int id = 0;
        id = Wake->replyU08( id, Tools->param_1 );
        id = Wake->replyU16( id, Tools->раram_2 );
        id = Wake->replyU16( id, Tools->param_3 );
        Wake->configAsk( id, MCmd::cmd_name);
      }

      где      id - индекс для автоматического подсчета числа отправляемых байт;
          раram_n - целочисленный параметр;
      replyUxx() - функции преобразования параметров в байты команды;
      configAsk() - функция формирования команды по протоколу Wake.

4. В классе MTools (файл mtools.h) в public объявите функцию, которая будет использоваться 
при реализации целевых алгоритмов пользователя, не посвященного в тонкости обмена с драйвером, 
например:
void txNameFunc(char p1, float p2, float p3);

5. В тот же класс MTools (файл mtools.cpp) вставьте определение объявленной функции, 
например:

      void MTools::NameFunc(char p1, float p2, float p3)
      {
        param_1 = m;
        param_2 = (unsigned short) (p2 * pMult);
        param_3 = (unsigned short)((p3 * pMult) / hz);
        buffCmd = MCmd::cmd_name;                              
      }

      где param_n - объявленный ранее в классе MTools, public параметр;
      buffCmd - там же буфер для очередного вызова команды, когда представится
      такая возможность;
      (unsigned short) (p2 * pMult) - пример преобразования в целочисленное.

6. И наконец надо обработать ответ. Это возложено на функцию упомянутого выше класса 
MCommands:   
        short MCommands::dataProcessing(),
где в конструкцию switch-case вставьте соответствующую обработку. Функция возвращает 0, 
если отправленный пакет получен и обработан, или иное, если что-то пошло не так.

